@page "/MonitorLogHistory"

@using Hippocampus.Web.Values
@using Hippocampus.Domain.Diplomat.HttpOut
@using Hippocampus.Domain.Models.Dto
@using Hippocampus.Domain.Models.Entities
@using Hippocampus.Domain.Services
@using MudBlazor.Charts
@inject IWaterTankService RecipientMonitorsServices


<MudText Typo="Typo.h4" Class="pb-8">Hist√≥rico de Monitores</MudText>

<MudGrid>
    <MudItem md="4">
        <MudSelect T="WaterTankGetDto"
                   SelectedValuesChanged="OnMonitorSelectClose"
                   Label="Selecione um Monitor"
                   Dense
                   @bind-Value="_monitorSelected"
                   Variant="Variant.Text">
            @foreach (var monitor in _monitorsSelectOptions)
            {
                <MudSelectItem Value="monitor">@monitor.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudGrid>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12">
        @if (_monitorSelected is not null && _xAxis.Any())
        {
            <MudTimeSeriesChart
                Height="500px"
                ChartType="ChartType.Line"
                ChartOptions="new ChartOptions { LineStrokeWidth = 1d, YAxisTicks = 10, MaxNumYAxisTicks = 10, XAxisLines = true }"
                ChartSeries="new() { _monitorSeries }"
                XAxisLabels="_xAxis"/>
        }
        else
        {
            <MudText Class="mt-10" Typo="Typo.body2">Nenhum dado a ser mostrado</MudText>
        }
    </MudItem>
</MudGrid>

@code {
    IEnumerable<WaterTankGetDto> _monitorsSelectOptions = [];
    IEnumerable<WaterTankGetDto> _monitors = [];
    WaterTankGetDto? _monitorSelected;

    IEnumerable<WaterTankLog> _logs = new List<WaterTankLog>();

    string[] _xAxis = [];
    TimeSeriesChartSeries _monitorSeries = new() { Name = "", Data = [] };
    List<TimeSeriesChartSeries.TimeValue> _recipientLevelRegisters = [];

    protected override async Task OnInitializedAsync()
    {
        await GetMonitors();
        _monitorsSelectOptions = _monitors;
        // CreateSelectOptions();
        await base.OnInitializedAsync();
    }

    async Task GetMonitors() => _monitors = await RecipientMonitorsServices.GetAll();

    // void CreateSelectOptions()
    // {
    //     _monitorsSelectOptions = _monitors.Select(m => new WaterTankGetDto
    //     {
    //         WaterTankId = m.WaterTankId,
    //         Name = m.Name
    //     });
    //     StateHasChanged();
    // }

    async Task OnMonitorSelectClose()
    {
        await GetLogsForSelectedMonitor();
        AssemblyLineGraphData();
    }

    async Task GetLogsForSelectedMonitor()
    {
        Console.WriteLine("Mudei");
        if (_monitorSelected is null) return;
        var today = DateTime.UtcNow;
        var yesterday = today.AddDays(-1);
        var serviceResult = await RecipientMonitorsServices.GetLogsForDateRange(_monitorSelected.WaterTankId, DateTime.MinValue, today);

        if (serviceResult.IsFailure)
            return;

        _logs = serviceResult.Result?.OrderBy(l => l.LogDate) ?? _logs;
    }

    void AssemblyLineGraphData()
    {
        var logsLimitedForDataRange = _logs.Where(x => x.LogDate >= DateTime.Now.AddMonths(-1)).ToList();
        _xAxis = logsLimitedForDataRange.Select(l => l.LogDate.ToString("dd/MM HH:mm")).ToArray();
        _recipientLevelRegisters = logsLimitedForDataRange.Select(l => new TimeSeriesChartSeries.TimeValue(l.LogDate, l.Level)).ToList();
        _monitorSeries = new TimeSeriesChartSeries { Name = $"{_monitorSelected?.Name} History", Data = _recipientLevelRegisters };
    }

}