@* @page "/MonitorLogHistory" *@
@* @using HippocampusWeb.Values *@
@* @using MudBlazor *@
@* @inject IHippocampusApiClient ApiClient; *@
@* *@
@* <MudText Typo="Typo.h4" Class="pb-8">Hist√≥rico de Monitores</MudText> *@
@* *@
@* <MudGrid> *@
@*     <MudItem md="4"> *@
@*         <MudSelect T="MonitorsSelectOption" *@
@*                    SelectedValuesChanged="OnMonitorSelectClose" *@
@*                    @bind-Value="_monitorSelected" *@
@*                    Label="Selecione um Monitor" *@
@*                    Variant="Variant.Outlined" *@
@*                    Class="d-flex"> *@
@*             @foreach (var monitor in _monitorsSelectOptions) *@
@*             { *@
@*                 <MudSelectItem T="MonitorsSelectOption" Value="monitor"/> *@
@*             } *@
@*         </MudSelect> *@
@*     </MudItem> *@
@* </MudGrid> *@
@* *@
@* @if (_monitorSelected is not null) *@
@* { *@
@*     <MudChart ChartType="ChartType.Line" ChartOptions="new ChartOptions{LineStrokeWidth = 0.5d, YAxisTicks = 10, MaxNumYAxisTicks = 10, XAxisLines = true}" ChartSeries="new() { _monitorSeries }" XAxisLabels="_xAxis"/> *@
@* } *@
@* *@
@* @code { *@
@*     IEnumerable<MonitorsSelectOption> _monitorsSelectOptions = Enumerable.Empty<MonitorsSelectOption>(); *@
@*     IEnumerable<MonitorsTableRow> _monitors = Enumerable.Empty<MonitorsTableRow>(); *@
@*     MonitorsSelectOption? _monitorSelected; *@
@* *@
@*     IEnumerable<MonitorLogForLineGraph> _logs = new List<MonitorLogForLineGraph>(); *@
@* *@
@*     string[] _xAxis = Array.Empty<string>(); *@
@*     ChartSeries _monitorSeries = new() { Name = "", Data = Array.Empty<double>() }; *@
@*     double[] _recipientLevelRegisters = Array.Empty<double>(); *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         await GetMonitors(); *@
@*         CreateSelectOptions(); *@
@*         await base.OnInitializedAsync(); *@
@*     } *@
@* *@
@*     async Task GetMonitors() => _monitors = await ApiClient.GetMonitorsForTable() ?? _monitors; *@
@* *@
@*     void CreateSelectOptions() *@
@*     { *@
@*         _monitorsSelectOptions = _monitors.Select(m => new MonitorsSelectOption *@
@*         { *@
@*             RecipientMonitorId = m.RecipientMonitorId, *@
@*             Name = m.Name *@
@*         }); *@
@*     } *@
@* *@
@*     async Task OnMonitorSelectClose() *@
@*     { *@
@*         await GetLogsForSelectedMonitor(); *@
@*         AssemblyLineGraphData(); *@
@*     } *@
@* *@
@*     async Task GetLogsForSelectedMonitor() *@
@*     { *@
@*         Console.WriteLine("Mudei"); *@
@*         if (_monitorSelected is null) return; *@
@*         var today = DateTime.UtcNow; *@
@*         var yesterday = today.AddDays(-1); *@
@*         var logs = await ApiClient.GetMonitorLogByDateRange(_monitorSelected.RecipientMonitorId, DateTime.MinValue, today); *@
@*         _logs = logs?.OrderBy(l => l.RegisterDate) ?? _logs; *@
@*     } *@
@* *@
@*     void AssemblyLineGraphData() *@
@*     { *@
@*         _xAxis = _logs.Select(l => l.RegisterDate.ToString("dd/MM HH:mm")).ToArray(); *@
@*         _recipientLevelRegisters = _logs.Select(l => (double)(l.LevelPercentage ?? 0)).ToArray(); *@
@*         _monitorSeries = new ChartSeries { Name = $"{_monitorSelected?.Name} History", Data = _recipientLevelRegisters }; *@
@*     } *@
@* *@
@* } *@