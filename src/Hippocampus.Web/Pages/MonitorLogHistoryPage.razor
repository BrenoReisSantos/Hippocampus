@page "/MonitorLogHistory"
@using Hippocampus.Web.Values
@using Hippocampus.Domain.Diplomat.HttpOut
@using Hippocampus.Domain.Models.Entities
@using Hippocampus.Domain.Services
@inject IRecipientMonitorServices RecipientMonitorsServices;


<MudText Typo="Typo.h4" Class="pb-8">Hist√≥rico de Monitores</MudText>

<MudGrid>
    <MudItem md="4">
        <MudSelect T="MonitorsSelectOption"
                   SelectedValuesChanged="OnMonitorSelectClose"
                   @bind-Value="_monitorSelected"
                   Label="Selecione um Monitor"
                   Variant="Variant.Outlined"
                   Class="d-flex">
            @foreach (var monitor in _monitorsSelectOptions)
            {
                <MudSelectItem T="MonitorsSelectOption" Value="monitor"/>
            }
        </MudSelect>
    </MudItem>
</MudGrid>

<MudContainer Class="d-flex justify-center" Style="height: 500px">
    @if (_monitorSelected is not null && _xAxis.Any())
    {
        <MudChart
            Height="500px"
            ChartType="ChartType.Line"
            ChartOptions="new ChartOptions { LineStrokeWidth = 1d, YAxisTicks = 10, MaxNumYAxisTicks = 10, XAxisLines = true }"
            ChartSeries="new() { _monitorSeries }"
            XAxisLabels="_xAxis"/>
    }
    else
    {
        <MudText Class="mt-10" Typo="Typo.body2">Nenhum dado a ser mostrado</MudText>
    }
</MudContainer>

@code {
    IEnumerable<MonitorsSelectOption> _monitorsSelectOptions = Enumerable.Empty<MonitorsSelectOption>();
    IEnumerable<RecipientMonitorForMonitorsTableDto> _monitors = Enumerable.Empty<RecipientMonitorForMonitorsTableDto>();
    MonitorsSelectOption? _monitorSelected;

    IEnumerable<RecipientLog> _logs = new List<RecipientLog>();

    string[] _xAxis = Array.Empty<string>();
    ChartSeries _monitorSeries = new() { Name = "", Data = Array.Empty<double>() };
    double[] _recipientLevelRegisters = Array.Empty<double>();

    protected override async Task OnInitializedAsync()
    {
        await GetMonitors();
        CreateSelectOptions();
        await base.OnInitializedAsync();
    }

    async Task GetMonitors() => _monitors = await RecipientMonitorsServices.GetRecipientMonitorsForMonitorsTable();

    void CreateSelectOptions()
    {
        _monitorsSelectOptions = _monitors.Select(m => new MonitorsSelectOption
        {
            RecipientMonitorId = m.RecipientMonitorId,
            Name = m.Name
        });
    }

    async Task OnMonitorSelectClose()
    {
        await GetLogsForSelectedMonitor();
        AssemblyLineGraphData();
    }

    async Task GetLogsForSelectedMonitor()
    {
        Console.WriteLine("Mudei");
        if (_monitorSelected is null) return;
        var today = DateTime.UtcNow;
        var yesterday = today.AddDays(-1);
        var serviceResult = await RecipientMonitorsServices.GetMonitorLogsInAGivenDateRange(_monitorSelected.RecipientMonitorId, DateTime.MinValue, today);

        if (serviceResult.IsFailure)
            return;

        _logs = serviceResult.Result?.OrderBy(l => l.RegisterDate) ?? _logs;
    }

    void AssemblyLineGraphData()
    {
        _xAxis = _logs.Select(l => l.RegisterDate.ToString("dd/MM HH:mm")).ToArray();
        _recipientLevelRegisters = _logs.Select(l => (double)l.LevelHeight).ToArray();
        _monitorSeries = new ChartSeries { Name = $"{_monitorSelected?.Name} History", Data = _recipientLevelRegisters };
    }

}