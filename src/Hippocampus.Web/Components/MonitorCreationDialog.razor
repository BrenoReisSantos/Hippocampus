@using Hippocampus.Web.Values.Forms
@using Hippocampus.Domain.Services
@using Hippocampus.Domain.Diplomat.HttpIn
@using Hippocampus.Domain.Models.Entities
@using Hippocampus.Domain.Models.Values
@using Hippocampus.Web.Values
@inject IWaterTankService WaterTankService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h4">
            Criação de um Monitor
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.h6">
            Características do Monitor
        </MudText>
        <MudTextField @bind-Value="_form.Name" Required Variant="Variant.Outlined" Label="Nome"/>
        <MudTextField
            @bind-Value="_form.LevelWhenEmpty"
            Required
            InputType="InputType.Number"
            Variant="Variant.Outlined"
            Label="Altura quando vazio (cm)"/>
        <MudTextField
            @bind-Value="_form.LevelWhenFull"
            Required
            InputType="InputType.Number"
            Variant="Variant.Outlined"
            Label="Altura quando cheio (cm)"/>
        <MudSelect T="WaterTankSelectOption"
                   @bind-Value="_connectedMonitorSelected"
                   Label="Bombear água para..."
                   Variant="Variant.Outlined">
            @foreach (var monitor in _monitorsSelectOptions)
            {
                <MudSelectItem T="WaterTankSelectOption" Value="monitor"/>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton
            Disabled="_processingForm"
            EndIcon="@Icons.Material.Filled.Check"
            Color="Color.Success"
            Variant="Variant.Filled"
            @onclick="CreateMonitor">
            @if (_processingForm)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Enviando...</MudText>
            }
            else
            {
                <MudText>Criar</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialog? MudDialog { get; set; }

    readonly WaterTankCreateForm _form = new();
    bool _processingForm;

    IEnumerable<WaterTankSelectOption> _monitorsSelectOptions = Enumerable.Empty<WaterTankSelectOption>();

    WaterTankSelectOption? _connectedMonitorSelected;

    private async Task GetMonitorsSelectOptions()
    {
        var monitors = await WaterTankService.GetAll();
        _monitorsSelectOptions = monitors.Select(m => new WaterTankSelectOption
        {
            Name = m.Name,
            WaterTankId = m.WaterTankId
        });
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetMonitorsSelectOptions();
    }

    async Task CreateMonitor()
    {
        _processingForm = true;
        var newRecipientMonitor = new WaterTankCreateDto
        {
            Name = _form.Name,
            PumpsToId = _form.WaterTankLikedToId,
            LevelWhenEmpty = _form.LevelWhenEmpty,
            LevelWhenFull = _form.LevelWhenFull
        };
        var response = await WaterTankService.Create(newRecipientMonitor);
        var isSuccess = response.IsSuccess;
        _processingForm = false;
        await MudDialog?.CloseAsync(DialogResult.Ok(isSuccess));
    }

}