@using Hippocampus.Domain.Models.Entities
@using Hippocampus.Domain.Services
@using Hippocampus.Web.Values.Forms
@using Hippocampus.Domain.Diplomat.HttpOut
@using Hippocampus.Web.Values
@using Hippocampus.Domain.Diplomat.HttpIn
@inject IRecipientMonitorServices RecipientMonitorServices
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h4">
            Atualização de um Monitor
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.h6">
            Características do Monitor
        </MudText>
        <MudTextField @bind-Value="_form.Name" Required Variant="Variant.Outlined" Label="Nome"/>
        <MudSelect T="RecipientType" @bind-Value="_form.RecipientType" Required Label="Tipo do Recipient do Monitor" Variant="Variant.Outlined">
            @foreach (var recipientType in Enum.GetValues<RecipientType>())
            {
                <MudSelectItem Value="recipientType"/>
            }
        </MudSelect>
        <MudTextField
            @bind-Value="_form.MinHeight"
            Required
            InputType="InputType.Number"
            Variant="Variant.Outlined"
            Label="Altura Mínima (cm)"/>
        <MudTextField
            @bind-Value="_form.MaxHeight"
            Required
            InputType="InputType.Number"
            Variant="Variant.Outlined"
            Label="Altura Máxima (cm)"/>
        <MudSelect T="MonitorsSelectOption"
                   @bind-Value="_connectedMonitorSelected"
                   Label="Selecione o Monitor Conectado"
                   Variant="Variant.Outlined">
            @foreach (var monitor in _monitorsSelectOptions)
            {
                <MudSelectItem T="MonitorsSelectOption" Value="monitor"/>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton
            Disabled="_processingForm"
            EndIcon="@Icons.Material.Filled.Check"
            Color="Color.Success"
            Variant="Variant.Filled"
            @onclick="UpdateMonitor">
            @if (_processingForm)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Enviando...</MudText>
            }
            else
            {
                <MudText>Atualizar</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public RecipientMonitorId MonitorId { get; set; }

    readonly RecipientMonitorUpdateForm _form = new();
    bool _processingForm;

    RecipientMonitorDto? _updatingMonitor;

    IEnumerable<MonitorsSelectOption> _monitorsSelectOptions = Enumerable.Empty<MonitorsSelectOption>();

    MonitorsSelectOption? _connectedMonitorSelected;

    private async Task GetMonitorsSelectOptions()
    {
        var monitors = await RecipientMonitorServices.GetRecipientMonitorsForMonitorsTable();
        _monitorsSelectOptions = monitors.Select(m => new MonitorsSelectOption
        {
            MacAddress = m.MacAddress,
            Name = m.Name,
            RecipientMonitorId = m.RecipientMonitorId
        });
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var servicoResultado = await RecipientMonitorServices.GetRecipientMonitorById(MonitorId);
        _updatingMonitor = servicoResultado.Result;
        await GetMonitorsSelectOptions();
        FillFormWithExistingMonitor();
    }

    async Task UpdateMonitor()
    {
        _processingForm = true;
        _form.RecipientMonitorLinkedToMacAddress = _connectedMonitorSelected?.MacAddress;

        var recipientMonitor = new RecipientMonitorPutDto
        {
            RecipientMonitorId = MonitorId,
            MaxHeight = _form.MaxHeight,
            RecipientMonitorLinkedToMacAddress = _form.RecipientMonitorLinkedToMacAddress,
            Name = _form.Name,
            RecipientType = _form.RecipientType,
            MinHeight = _form.MinHeight
        };

        var response = await RecipientMonitorServices.UpdateRecipientMonitor(recipientMonitor);
        _processingForm = false;

        if (response.IsSuccess)
            MudDialog?.Close(DialogResult.Ok(response.IsSuccess));
        if (response.IsFailure)
        {
            Snackbar.Add(response.Message, Severity.Warning, config =>
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
                config.ShowCloseIcon = true;
            });
        }
    }

    void FillFormWithExistingMonitor()
    {
        _form.RecipientMonitorId = _updatingMonitor.RecipientMonitorId;
        _form.Name = _updatingMonitor.Name;
        _form.RecipientType = _updatingMonitor.RecipientType;
        _connectedMonitorSelected = _monitorsSelectOptions.SingleOrDefault(
            monitorOption => monitorOption.MacAddress == _updatingMonitor.MonitorLinkedToMacAddress);
        _form.RecipientMonitorLinkedToMacAddress = _updatingMonitor.MonitorLinkedToMacAddress;
        _form.MaxHeight = _updatingMonitor.MaxHeight;
        _form.MinHeight = _updatingMonitor.MinHeight;
    }

}