@using MudBlazor
@using Hippocampus.Domain.Services
@using Hippocampus.Domain.Diplomat.HttpOut
@using Hippocampus.Domain.Models.Dto
@using Hippocampus.Domain.Models.Entities
@inject IWaterTankService WaterTankService
@inject IDialogService DialogService

<MudTable OnRowClick="OpenUpdateMonitorDialog" T="WaterTankGetDto" Loading="_tableDataLoading" Height="500px"
          Elevation="0" Outlined="false" Items="_testTableData" Hover="true">
    <HeaderContent>
        <MudTh>Nome</MudTh>
        <MudTh Style="text-align:center">Nível Atual (cm)</MudTh>
        <MudTh Style="text-align:center">Nível Mínimo (cm)</MudTh>
        <MudTh Style="text-align:center">Nível Máximo (cm)</MudTh>
        <MudTh Style="text-align:center">Em Sobreposição?</MudTh>
        <MudTh Style="text-align:center">Bombeando Água?</MudTh>
        <MudTh Style="text-align:center">Bombeia Para</MudTh>
        @* <MudTh Style="text-align:center">Estado</MudTh> *@
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nome">@context.Name</MudTd>
        <MudTd Style="text-align:center" DataLabel="Nível">@context.CurrentLevel</MudTd>
        <MudTd Style="text-align:center" DataLabel="Altura Mínima">@context.LevelWhenEmpty</MudTd>
        <MudTd Style="text-align:center" DataLabel="Altura Mínima">@context.LevelWhenFull</MudTd>
        <MudTd Style="text-align:center" DataLabel="Em Sobreposição?">@context.BypassMode</MudTd>
        <MudTd Style="text-align:center" DataLabel="Bombeando Água?">@context.PumpingWater</MudTd>
        <MudTd Style="text-align:center" DataLabel="Bombeia Para">@context.PumpsTo?.Name</MudTd>
    </RowTemplate>
</MudTable>

@code {
    bool _tableDataLoading = false;
    IEnumerable<WaterTankGetDto> _testTableData = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await UpdateTable();
    }

    public async Task UpdateTable()
    {
        _tableDataLoading = true;
        _testTableData = await WaterTankService.GetAll();
        _tableDataLoading = false;
        StateHasChanged();
    }

    async Task OpenUpdateMonitorDialog(TableRowClickEventArgs<WaterTankGetDto> rowClickEventArgs)
    {
        var clickedRow = rowClickEventArgs.Item;
        var dialogArguments = new DialogParameters { { "MonitorId", clickedRow.WaterTankId } };

        var dialog = DialogService.Show<MonitorUpdateDialog>("", dialogArguments);

        var dialogResult = await dialog.Result;

        if (!dialogResult.Canceled)
            await UpdateTable();
    }

}